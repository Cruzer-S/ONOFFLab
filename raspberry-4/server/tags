!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	makefile	/^CC = gcc$/;"	m
CFLAGS	makefile	/^CFLAGS = -std=c11$/;"	m
CONTENT_ENCODING	http_handler.c	/^	CONTENT_LENGTH, CONTENT_TYPE, CONTENT_ENCODING$/;"	e	enum:HTTP_ENTITY	file:
CONTENT_LENGTH	http_handler.c	/^	CONTENT_LENGTH, CONTENT_TYPE, CONTENT_ENCODING$/;"	e	enum:HTTP_ENTITY	file:
CONTENT_TYPE	http_handler.c	/^	CONTENT_LENGTH, CONTENT_TYPE, CONTENT_ENCODING$/;"	e	enum:HTTP_ENTITY	file:
DELETE	http_handler.c	/^	GET, POST, DELETE, PETCH$/;"	e	enum:HTTP_METHOD	file:
DEVICE_MANAGER_H__	device_manager.h	2;"	d
EOH	http_handler.h	/^	uint8_t *EOH; \/\/ End of header$/;"	m	struct:http_header
EXTRACT	main.c	97;"	d	file:
GET	http_handler.c	/^	GET, POST, DELETE, PETCH$/;"	e	enum:HTTP_METHOD	file:
HEADER_SIZE	http_handler.h	10;"	d
HTTP_ENTITY	http_handler.c	/^enum HTTP_ENTITY {$/;"	g	file:
HTTP_HANDLER__	http_handler.h	2;"	d
HTTP_METHOD	http_handler.c	/^enum HTTP_METHOD {$/;"	g	file:
IPC_COMMAND	server_handler.h	/^enum IPC_COMMAND {$/;"	g
IPC_REGISTER_DEVICE	server_handler.h	/^	IPC_REGISTER_DEVICE = 0x01,$/;"	e	enum:IPC_COMMAND
MAX_DEVICE	device_manager.h	4;"	d
MAX_EVENT	server_handler.h	16;"	d
OUTPUT	makefile	/^OUTPUT = output.out$/;"	m
PETCH	http_handler.c	/^	GET, POST, DELETE, PETCH$/;"	e	enum:HTTP_METHOD	file:
POST	http_handler.c	/^	GET, POST, DELETE, PETCH$/;"	e	enum:HTTP_METHOD	file:
SERVER_HANDLER_H__	server_handler.h	2;"	d
SIZEOF	http_handler.c	3;"	d	file:
accept_epoll_client	server_handler.c	/^int accept_epoll_client(int epfd, int serv_sock, int flags)$/;"	f
change_flag	server_handler.c	/^int change_flag(int fd, int flag)$/;"	f
change_sockopt	server_handler.c	/^int change_sockopt(int fd, int level, int flag, int value)$/;"	f
client_handling	main.c	/^int client_handling(int sock)$/;"	f
content	http_handler.h	/^	} content;$/;"	m	struct:http_header	typeref:struct:http_header::__anon1
count_device	device_manager.c	/^int count_device(void)$/;"	f
cur	device_manager.c	/^					 *cur  = dlist;$/;"	v	typeref:struct:	file:
delete_epoll_fd	server_handler.c	/^int delete_epoll_fd(int epfd, int tgfd)$/;"	f
device	device_manager.c	/^struct device {$/;"	s	file:
dlist	device_manager.c	/^} static dlist[MAX_DEVICE];$/;"	v	file:
dptr	device_manager.c	/^static struct device *dptr = dlist,$/;"	v	typeref:struct:device	file:
encoding	http_handler.h	/^		char *encoding;$/;"	m	struct:http_header::__anon1
error_handling	main.c	/^_Noreturn void error_handling(const char *fmt, ...)$/;"	f
find_device	device_manager.c	/^int find_device(int id)$/;"	f
flush_socket	server_handler.c	/^int flush_socket(int sock)$/;"	f
http_entity_name	http_handler.c	/^static const char *http_entity_name[] = {$/;"	v	file:
http_header	http_handler.h	/^struct http_header {$/;"	s
http_method_string	http_handler.c	/^static const char *http_method_string[] = {$/;"	v	file:
id	device_manager.c	/^	int id;$/;"	m	struct:device	file:
init_http_header	http_handler.c	/^void init_http_header(struct http_header *header)$/;"	f
is_http_header	http_handler.c	/^bool is_http_header(const char *header)$/;"	f
length	http_handler.h	/^		char *length;$/;"	m	struct:http_header::__anon1
link_ptop	server_handler.c	/^int link_ptop(int origin, int dest, int length, int timeout)$/;"	f
main	main.c	/^int main(int argc, char *argv[])$/;"	f
make_server	server_handler.c	/^int make_server(short port, int backlog)$/;"	f
method	http_handler.h	/^	char *method;$/;"	m	struct:http_header
parse_http_header	http_handler.c	/^int parse_http_header(char *raw, size_t size, struct http_header *header)$/;"	f
readall	server_handler.c	/^int readall(int sock, char *buffer, int length)$/;"	f
recv_until	server_handler.c	/^int recv_until(int sock, char *buffer, int bsize, char *end)$/;"	f
register_device	device_manager.c	/^int register_device(int sock, int id)$/;"	f
register_epoll_fd	server_handler.c	/^int register_epoll_fd(int epfd, int tgfd, int flag)$/;"	f
show_http_header	http_handler.c	/^void show_http_header(struct http_header *header)$/;"	f
sock	device_manager.c	/^	int sock;$/;"	m	struct:device	file:
start_epoll_thread	main.c	/^int start_epoll_thread(int epfd, int serv_sock)$/;"	f
type	http_handler.h	/^		char *type;$/;"	m	struct:http_header::__anon1
url	http_handler.h	/^	char *url;$/;"	m	struct:http_header
version	http_handler.h	/^	char *version;$/;"	m	struct:http_header
wait_epoll_event	server_handler.c	/^struct epoll_event *wait_epoll_event(int epfd, int maxevent, int timeout)$/;"	f
